import streamlit as st
import pandas as pd
import pdfplumber
import re
from rapidfuzz import fuzz, process
from io import BytesIO

st.set_page_config(page_title="Omni Picklist OCR", page_icon="üì¶", layout="wide")

st.title("üì¶ Omni Picklist OCR & Excel Updater")
st.caption("‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î SKU ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå Excel template ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

# ========== Upload ==========
uploaded_pdfs = st.file_uploader("üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF Picklist (‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ)", type=["pdf"], accept_multiple_files=True)
uploaded_excel = st.file_uploader("üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel Template", type=["xlsx"])

# ========== Extract Function ==========
def extract_sku_quantity_from_pdf(file):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SKU ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å PDF"""
    data = []
    with pdfplumber.open(file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if not text:
                continue
            lines = text.split("\n")
            for line in lines:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ SKU
                sku_match = re.search(r"SKU:\s*([A-Za-z0-9\-\._\s/]+)", line)
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)
                qty_match = re.search(r"\b(\d+)$", line.strip())
                if sku_match and qty_match:
                    sku = sku_match.group(1).strip()
                    qty = int(qty_match.group(1))
                    data.append({"SKU": sku, "Qty": qty})
    return pd.DataFrame(data)

def fuzzy_match(sku, sku_list, threshold=80):
    """‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà SKU ‡πÅ‡∏ö‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"""
    match = process.extractOne(sku, sku_list, scorer=fuzz.partial_ratio)
    if match and match[1] >= threshold:
        return match[0]
    return None

# ========== Main Process ==========
if uploaded_pdfs and uploaded_excel:
    st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
    all_data = pd.DataFrame(columns=["SKU", "Qty"])

    for pdf in uploaded_pdfs:
        df = extract_sku_quantity_from_pdf(pdf)
        all_data = pd.concat([all_data, df], ignore_index=True)

    # ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î SKU
    sku_sum = all_data.groupby("SKU", as_index=False)["Qty"].sum()
    st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SKU ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å PDF")
    st.dataframe(sku_sum, use_container_width=True)

    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
    template_df = pd.read_excel(uploaded_excel)
    st.subheader("üìä Template ‡πÄ‡∏î‡∏¥‡∏°")
    st.dataframe(template_df.head(), use_container_width=True)

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    updated_df = template_df.copy()
    updated_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÉ‡∏´‡∏°‡πà)"] = 0

    for i, row in updated_df.iterrows():
        sku_excel = str(row["SKU"]).strip()
        match_sku = fuzzy_match(sku_excel, sku_sum["SKU"].tolist())
        if match_sku:
            qty = sku_sum.loc[sku_sum["SKU"] == match_sku, "Qty"].sum()
            updated_df.loc[i, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÉ‡∏´‡∏°‡πà)"] = qty

    st.subheader("‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
    st.dataframe(updated_df, use_container_width=True)

    # ========== Download ==========
    output = BytesIO()
    updated_df.to_excel(output, index=False)
    st.download_button(
        "‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß",
        data=output.getvalue(),
        file_name="Updated_Picklist.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

st.divider()
st.caption("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ BLS Automation Lab ‚Äì ‡πÉ‡∏ä‡πâ OCR ‡πÅ‡∏•‡∏∞ fuzzy matching ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà SKU ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ üß†")
